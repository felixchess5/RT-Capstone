name: 🧪 Test Suite

on:
  push:
    branches: [ main, develop, Test ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  TESTING: "true"

jobs:
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt

    - name: 🖤 Auto-format code with Black
      run: black src tests

    - name: 📋 Check import sorting with isort
      run: isort --check-only --diff src tests

    - name: 🔍 Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --max-complexity=10 --max-line-length=88 --statistics

    - name: 🏷️ Type checking with mypy
      run: mypy src --ignore-missing-imports || true

  test-unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr

    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install test-only dependencies required by unit tests
        pip install pytest pytest-asyncio pytest-mock pytest-xdist pytest-cov pytest-html pytest-json-report freezegun responses factory-boy

    - name: 🧪 Run unit tests
      env:
        GROQ_API_KEY: "test_key"
        LANGCHAIN_TRACING_V2: "false"
      run: |
        pytest tests/unit/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          --maxfail=5 \
          --tb=short

    - name: 📊 Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test-unit]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr

    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Ensure pytest and basic plugins present for integration runs
        pip install pytest pytest-asyncio pytest-mock pytest-xdist

    - name: 🔗 Run integration tests
      env:
        GROQ_API_KEY: "test_key"
        LANGCHAIN_TRACING_V2: "false"
      run: |
        pytest tests/integration/ -v \
          --maxfail=3 \
          --tb=short \
          -m "not slow"

  test-e2e:
    name: 🎯 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test-integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr

    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🎯 Run end-to-end tests
      env:
        GROQ_API_KEY: "test_key"
        LANGCHAIN_TRACING_V2: "false"
      run: |
        pytest tests/e2e/ -v \
          --maxfail=2 \
          --tb=short \
          -m "not llm" \
          --timeout=300

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: 🔒 Run security scan with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll

    - name: 🛡️ Check dependencies with Safety
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [test-integration]
    if: github.event_name == 'push' && contains(github.ref, 'main')

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: ⚡ Run performance tests
      env:
        GROQ_API_KEY: "test_key"
        LANGCHAIN_TRACING_V2: "false"
      run: |
        pytest tests/ -v \
          -m performance \
          --benchmark-only \
          --benchmark-json=benchmark.json

    - name: 📊 Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.json

  docs:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme

    - name: 📚 Check documentation builds
      run: |
        # Check if README renders properly
        python -c "import markdown; markdown.markdown(open('README.md').read())"

        # Check if testing guide renders properly
        python -c "import markdown; markdown.markdown(open('docs/testing.md').read())"

    - name: 🔍 Check for broken links
      run: |
        # Basic link checking (can be enhanced with more sophisticated tools)
        grep -r "http" *.md | grep -v "localhost" || true

  matrix-test:
    name: 🧪 Matrix Testing
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.11"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr

    - name: 📦 Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install tesseract

    - name: 📦 Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows Tesseract installation would go here
        # For now, we'll skip OCR tests on Windows
        echo "Skipping Tesseract on Windows"

    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🧪 Run core tests
      env:
        GROQ_API_KEY: "test_key"
        LANGCHAIN_TRACING_V2: "false"
      run: |
        pytest tests/unit/ tests/integration/ -v \
          --maxfail=5 \
          -m "not slow and not llm" \
          --tb=short

  report:
    name: 📊 Test Report
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, security]
    if: always()

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📊 Generate test report
      run: |
        echo "## 🧪 Test Results Summary" > test-report.md
        echo "" >> test-report.md

        if [[ "${{ needs.test-unit.result }}" == "success" ]]; then
          echo "✅ Unit Tests: PASSED" >> test-report.md
        else
          echo "❌ Unit Tests: FAILED" >> test-report.md
        fi

        if [[ "${{ needs.test-integration.result }}" == "success" ]]; then
          echo "✅ Integration Tests: PASSED" >> test-report.md
        else
          echo "❌ Integration Tests: FAILED" >> test-report.md
        fi

        if [[ "${{ needs.security.result }}" == "success" ]]; then
          echo "✅ Security Scan: PASSED" >> test-report.md
        else
          echo "❌ Security Scan: FAILED" >> test-report.md
        fi

        echo "" >> test-report.md
        echo "📅 **Date**: $(date)" >> test-report.md
        echo "🔗 **Commit**: ${{ github.sha }}" >> test-report.md
        echo "🌟 **Branch**: ${{ github.ref_name }}" >> test-report.md

        cat test-report.md

    - name: 📤 Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-report.md

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, test-e2e, security, performance]
    if: always()

    steps:
    - name: 🧹 Cleanup artifacts
      run: |
        echo "Cleaning up temporary files and artifacts..."
        # This is a placeholder for cleanup operations
        echo "Cleanup completed."

# Workflow notifications and status checks
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
